const { expect, assert } = require("chai");
const { BigNumber, utils } = require("ethers");
const fs = require("fs");
const hre = require("hardhat");
const toWei = (value) => utils.parseEther(value.toString());
const fromWei = (value) =>
  utils.formatEther(typeof value === "string" ? value : value.toString());

// const getBalance = provider.getBalance;

const ADDRESS_ZERO = "0x0000000000000000000000000000000000000000";

describe("metabet-test", function () {
  let accounts;
  let erc;
  let metabet;
  let metatoken = "0x444838C1f0a0e86114DE6d481c5dde98c4ba75FD";
  const tokenAbi = getAbi(
    "./artifacts/@openzeppelin/contracts/token/ERC20/IERC20.sol/IERC20.json"
  );

  before(async function () {
    accounts = await ethers.getSigners();

    console.log("account 0", accounts[0].address);
    console.log("account 1", accounts[1].address);
    console.log("account 2", accounts[2].address);

    erc = new ethers.Contract(metatoken, tokenAbi, accounts[0]);
  });

  it("deploy", async function () {
    const _bet = await ethers.getContractFactory("MetaBet");
    metabet = await _bet.deploy();
    await metabet.deployed();
    console.log("deploy metabet", metabet.address);
  });
  // 创建世界杯押注项目
  it("createMatch", async function () {
    // Match base Info
    // struct MatchInfo {
    //     uint32 oddsTeamA;
    //     uint32 oddsTeamB;
    //     uint32 oddsDraw;
    //     uint256 startAt;
    //     AssetType assetType;
    //     address payToken;
    //     uint256 initOddsTeamA;
    //     uint256 initOddsTeamB;
    //     uint256 initOddsDraw;
    // }
    let startAt = parseInt(new Date().getTime() / 1000) + 3600;

    let initOddsTeamA = 10
    let initOddsTeamB = 30
    let initOddsDraw = 30

    // let _matchInfo = [1, 2, 5, startAt, 1, metatoken, 10, 20, 30];
    const _matchInfo = {
      oddsTeamA: 1,
      oddsTeamB: 2,
      oddsDraw: 2,
      startAt,
      assetType: 1,
      payToken: metatoken,
      initOddsTeamA: toWei(initOddsTeamA),
      initOddsTeamB: toWei(initOddsTeamB),
      initOddsDraw: toWei(initOddsDraw),
    };

    let _apiMatchId = 1001;
    let _matchResultLink = "https://api-football-v1.p.rapidapi.com/v2/";
    // function createMatch(
    //     uint256 _apiMatchId,
    //     string calldata _matchResultLink,
    //     MatchInfo calldata _matchInfo
    // ) public payable isNewAPIMatch(_apiMatchId) onlyOwner returns (uint256) {
    const amount = toWei(0);

    let totalOdds = toWei(initOddsTeamA + initOddsTeamB + initOddsDraw);

    let tbalance =await erc.balanceOf(accounts[0].address);
    console.log(accounts[0].address, "token balance:", tbalance);
    await erc.approve(metabet.address, totalOdds, {
      gasLimit: b("8000000"),
    });
    console.log(erc.address, "approve done:" , totalOdds);

    let metabetret = await metabet.createMatch(
      _apiMatchId,
      _matchResultLink,
      _matchInfo,
      { value: amount, gasLimit: BigNumber.from("8000000") }
    );
    console.log(metabetret, "metabetret");
    // await print();
  });

  async function print() {
    console.log("----------------------------------------------------");

    console.log("account0 erc:", d(await erc.balanceOf(accounts[0].address)));
    console.log("account1 erc:", d(await erc.balanceOf(accounts[1].address)));
    console.log("account2 erc:", d(await erc.balanceOf(accounts[2].address)));
    console.log(
      "metabet erc-" + metabet.address + ":",
      d(await erc.balanceOf(metabet.address))
    );

    console.log("----------------------------------------------------");
  }

  function getAbi(jsonPath) {
    let file = fs.readFileSync(jsonPath);
    let abi = JSON.parse(file.toString()).abi;
    return abi;
  }

  function m(num) {
    return BigNumber.from("1000000000000000000").mul(num);
  }

  function d(bn) {
    return bn.div("1000000000000000").toNumber() / 1000;
  }

  function b(num) {
    return BigNumber.from(num);
  }

  function n(bn) {
    return bn.toNumber();
  }

  function s(bn) {
    return bn.toString();
  }
});
